/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package es.uned.TFGDavidGiner.core;

import es.uned.TFGDavidGiner.core.interfaces.IShareableProperties;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.swing.event.EventListenerList;

/**
 * Clase base abstracta para todos los componentes "hoja" (no contenedores) del framework.
 * <p>
 * Esta clase extiende {@link BaseComponent} y proporciona la funcionalidad fundamental
 * para los componentes que gestionan un dato. Es una clase genérica que implementa
 * la interfaz {@link IShareableProperties}, permitiendo a las subclases definir el tipo de
 * dato que manejarán. También incluye mecanismos para la gestión de propiedades
 * mediante reflexión.
 *
 * @author david
 * @version 1.0
 * @since 2025-07-13
 */
public abstract class LeafComponent extends BaseComponent implements IShareableProperties {

    /**
     * Lista para gestionar los listeners de eventos de este componente.
     * Aunque no se usa en la versión actual, está disponible para futuras ampliaciones.
     */
    private final EventListenerList listeners;

    /**
     * Índice que puede ser utilizado para identificar unívocamente a este componente
     * dentro de un contenedor que maneje múltiples instancias del mismo tipo,
     * como por ejemplo en una lista o tabla. Su gestión depende del
     * contenedor padre.
     */
    private int indiceComponente;

    /**
     * Constructor por defecto.
     * <p>
     * Inicializa los componentes visuales y la lista de listeners.
     */
    public LeafComponent() {
        initComponents();
        listeners = new EventListenerList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    /**
     * Obtiene los tipos de datos de un conjunto de propiedades de este componente.
     * <p>
     * Utiliza reflexión para inspeccionar los campos de la clase y determinar
     * el tipo de dato de cada propiedad especificada por su nombre.
     *
     * @param nombresDePropiedades Un {@link Set} con los nombres de las propiedades a inspeccionar.
     * @return Un {@link Map} que asocia el nombre de cada propiedad con su tipo ({@link Class}).
     */
    @Override
    public Map<String, Class<?>> getPropertiesType(Set<String> nombresDePropiedades) {
        // Mapa para almacenar los resultados: NombrePropiedad -> Tipo
        Map<String, Class<?>> tiposDePropiedades = new HashMap<>();

        // Itera sobre cada nombre de propiedad para encontrar su tipo.
        for (String nombrePropiedad : nombresDePropiedades) {
            try {
                // Usa reflexión para obtener el objeto Field correspondiente al nombre.
                Field campo = this.getClass().getDeclaredField(nombrePropiedad);
                
                // Obtiene el tipo del campo y lo añade al mapa.
                tiposDePropiedades.put(nombrePropiedad, campo.getType());

            } catch (NoSuchFieldException e) {
                // Maneja el caso en que la propiedad no exista en esta clase.
                System.err.println("Error de reflexión: La propiedad '" + nombrePropiedad + "' no existe en la clase " + this.getClass().getSimpleName());
            }
        }

        return tiposDePropiedades;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
        
    /**
     * {@inheritDoc}
     */
    @Override
    public abstract Set<String> getSharedProperies();
    
    /**
     * Calcula la intersección entre las propiedades compartidas de este componente y
     * un conjunto de propiedades dado.
     * <p>
     * Este método es útil para descubrir qué propiedades son comunes entre dos
     * componentes para facilitar el data binding.
     *
     * @param set1 Un conjunto de nombres de propiedades a comparar.
     * @return un nuevo {@link Set} que contiene solo los nombres de las propiedades
     * presentes en ambos conjuntos.
     */
    @Override
    public Set<String> propertiesInCommon(Set<String> set1) {
        // Obtiene las propiedades compartidas de este componente.
        Set<String> set2 = this.getSharedProperies();

        // Crea una copia del primer conjunto para no modificar el original.
        Set<String> interseccion = new HashSet<>(set1);

        // Mantiene en 'interseccion' solo los elementos que también están en 'set2'.
        interseccion.retainAll(set2);

        return interseccion;
    }
    
    @Override
    public boolean isLeaf() {
        return true;
    }
}
