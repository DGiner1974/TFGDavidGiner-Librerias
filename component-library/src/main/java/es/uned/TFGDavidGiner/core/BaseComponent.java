/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package es.uned.TFGDavidGiner.core;

import java.awt.LayoutManager;
import es.uned.TFGDavidGiner.core.interfaces.IValidation;

/**
 * Clase base abstracta para componentes de la interfaz de usuario que extienden
 * {@link javax.swing.JPanel} e implementan la interfaz {@link IValidation}.
 * <p>
 * Esta clase está diseñada para ser el fundamento de otros componentes Swing
 * personalizados que requieran una lógica de validación. Al ser abstracta, no
 * puede ser instanciada directamente, sino que debe ser extendida por otras clases.
 *
 * @author david
 * @version 1.0
 * @since 2025-07-12
 */
public abstract class BaseComponent extends javax.swing.JPanel implements IValidation {

    /**
     * Constructor por defecto.
     * <p>
     * Crea un nuevo {@code BaseComponent} con un {@code GroupLayout} por defecto
     * e inicializa los componentes del formulario.
     */
    public BaseComponent() {
        initComponents();
    }

    /**
     * Indicador para controlar si el borde del componente debe ser visible.
     * Por defecto es {@code true}. Los contenedores pueden desactivarlo para
     * los componentes hijos para evitar bordes anidados.
     */
    private boolean showBorder = true; // Por defecto, los componentes muestran su borde

    /**
     * Establece la propiedad showBorder y elimina el borde del componente en caso de que así se indique
     * @param show indica si se debe mostrar o no
     */
    public void setShowBorder(boolean show) {
        this.showBorder = show;
        // Lógica para añadir o quitar el borde visualmente (opcional,
        // pero lo ideal es controlarlo en la creación).
        if (!show) {
            setBorder(null);
        }
    }
    
    /**
     * Comprueba si el borde del componente debe ser visible.
     * <p>
     * Este método es {@code protected} para que las clases descendientes y los
     * contenedores del mismo paquete puedan consultar esta propiedad, pero
     * permanece oculto para el desarrollador de aplicaciones final.
     *
     * @return El valor actual de la propiedad {@code showBorder}.
     */
    protected boolean getShowBorder() {
        return this.showBorder;
    }
    
    /**
     * Constructor con un gestor de diseño (LayoutManager) específico.
     * <p>
     * Crea un nuevo {@code BaseComponent} utilizando el gestor de diseño proporcionado
     * y luego inicializa los componentes del formulario.
     *
     * @param layout El {@link LayoutManager} que se utilizará para este panel.
     */
    public BaseComponent(LayoutManager layout) {
        super(layout); // Llama al constructor de la clase padre (JPanel) con el layout especificado.
        initComponents(); // Inicializa los componentes visuales.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * Determina si este componente es una "hoja" (un componente final) o un
     * contenedor que puede tener hijos.
     *
     * @return {@code true} si es un componente hoja, {@code false} si es un contenedor.
     */
    public abstract boolean isLeaf();
}
