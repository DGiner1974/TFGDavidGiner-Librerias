/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package es.uned.TFGDavidGiner.components.leafs;

import es.uned.TFGDavidGiner.core.LeafComponent;
import java.awt.Color;
import java.util.Set;

/**
 * Componente de hoja que encapsula un {@link javax.swing.JSlider} para gestionar
 * un valor de tipo {@link Integer} de forma segura.
 * <p>
 * Este componente extiende {@link LeafComponent} con el tipo genérico {@code Integer},
 * lo que garantiza la seguridad de tipos para el dato gestionado. Permite al usuario
 * seleccionar un valor numérico y lo valida para que esté en el rango de 0 a 100,
 * proporcionando retroalimentación visual en caso de error.
 *
 * @author david
 * @version 1.0
 * @since 12-07-2025
 */
public class SliderSquad extends LeafComponent {

    //<editor-fold defaultstate="collapsed" desc="Declaración de campos y constantes">
    /**
     * Almacena el color de fondo por defecto del componente para poder restaurarlo.
     */
    private final Color defaultBackgroundColor= this.getBackground();
    
    /**
     * Define el color que se usará para resaltar un error de validación.
     */
    private static final Color ERROR_COLOR = new Color(255, 51, 51); 

    /**
     * Almacena el valor numérico actual del componente.
     */
    private int pesoMaxSentadilla = 0;

    /**
     * Almacena el mensaje de la última validación fallida.
     */
    private String error = "";

    /**
     * Almacena el máximo valor admitido.
     */
    private int maxValor = 200;

    /**
     * Almacena el mínimo valor admitido.
     */
    private int minValor = 0;
    
    /**
     * Define el conjunto de propiedades que pueden ser compartidas o enlazadas
     * con otros componentes dentro del framework.
     */
    private static final Set<String> sharedProperties = Set.of("pesoMaxSentadilla");
    //</editor-fold>

    /**
     * Constructor por defecto.
     * <p>
     * Inicializa los componentes visuales y establece el valor inicial de la
     * propiedad 'data' basándose en el valor por defecto del JSlider.
     */
    public SliderSquad() {
        initComponents();
        //Asignamos los límites del slider
        this.jSlider1.setMinimum(minValor);
        this.jSlider1.setMaximum(maxValor);
        // Sincroniza el dato interno con el valor inicial del JSlider.
        this.pesoMaxSentadilla = this.jSlider1.getValue();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();

        jSlider1.setValue(0);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel1.setText("Squad (Kg):");
        jLabel1.setMaximumSize(new java.awt.Dimension(75, 16));
        jLabel1.setMinimumSize(new java.awt.Dimension(75, 16));
        jLabel1.setPreferredSize(new java.awt.Dimension(75, 16));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSlider1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.getAccessibleContext().setAccessibleName("Squad (Kg):");
    }// </editor-fold>//GEN-END:initComponents

    /**
    * Manejador de eventos para cuando el valor del JSlider cambia.
    * <p>
    * Sincroniza el valor del slider con la propiedad 'data' del componente.
    *
    * @param evt El evento de cambio de estado.
    */
    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        setPesoMaxSentadilla(jSlider1.getValue());     
    }//GEN-LAST:event_jSlider1StateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables

    //<editor-fold defaultstate="collapsed" desc="Getters y Setters de Propiedades">
    /**
     * Obtiene el valor de la propiedad principal ('data') del componente.
     * @return El valor actual como un {@code Integer}.
     */
    public int getPesoMaxSentadilla() {
       // System.out.println("Spinner getPesoMaxPressBanca: " + pesoMaxPressBanca.toString());
        return pesoMaxSentadilla;
    }

    /**
     * Establece el valor de la propiedad principal ('data') del componente.
     * <p>
     * Actualiza el estado interno, sincroniza la vista (JSlider) y notifica
     * a los listeners de que la propiedad 'data' ha cambiado.
     *
     * @param dato El nuevo valor de tipo {@code Integer} para el componente.
     */
    public void setPesoMaxSentadilla(int dato) {
        int oldValue = this.pesoMaxSentadilla;
        if (oldValue!=dato) {
            this.pesoMaxSentadilla = dato;
            // Actualiza la UI para que refleje el nuevo valor.
            jSlider1.setValue(dato);
            // Notifica a los listeners del cambio en la propiedad "data".
            firePropertyChange("pesoMaxSentadilla", oldValue, dato);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Implementación de la Interfaz Validation">
    /**
     * {@inheritDoc}
     * Restablece el componente a su estado inicial por defecto.
     *
     * @return {@code true} si la configuración fue exitosa, {@code false} en caso contrario.
     */
    @Override
    public boolean configurar() {
        try {
            setPesoMaxSentadilla(0);
            setBackground(defaultBackgroundColor);
            error = "";
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * {@inheritDoc}
     * Valida si el valor de 'data' se encuentra en el rango de 0 a 100.
     *
     * @return {@code true} si el valor es válido, {@code false} en caso contrario.
     */
    @Override
    public boolean validar() {
        if (pesoMaxSentadilla > maxValor || pesoMaxSentadilla < minValor) {
            this.setBackground(ERROR_COLOR);
            error = ""; //Sentadilla: El valor debe estar entre " + minValor + " y " + maxValor + ".";
            return false;
        } else {
            setBackground(defaultBackgroundColor);
            error = "";
            return true;
        }
    }

    /**
     * {@inheritDoc}
     * @return El último mensaje de error de validación, o una cadena vacía si no hay error.
     */
    @Override
    public String getError() {
        return error;
    }
    //</editor-fold>

    /**
     * {@inheritDoc}
     * @return Un {@link Set} con los nombres de las propiedades compartidas.
     */
    @Override
    public Set<String> getSharedProperies() {
        return sharedProperties;
    }

}

