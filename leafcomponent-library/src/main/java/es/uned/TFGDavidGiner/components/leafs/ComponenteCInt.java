/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package es.uned.TFGDavidGiner.components.leafs;

import es.uned.TFGDavidGiner.core.LeafComponent;
import java.awt.Color;
import java.util.Set;

/**
 * Componente de hoja que encapsula una {@link javax.swing.JProgressBar} para
 * visualizar un valor de tipo {@link Integer} de forma segura.
 * <p>
 * Este componente, que hereda de {@link LeafComponent}, está diseñado para mostrar
 * un valor numérico de manera visual. Al ser genérico con {@code Integer}, garantiza
 * la seguridad de tipos para el dato gestionado. Implementa la interfaz 
 * {@link es.uned.TFGDavidGiner.core.interfaces.IValidation} para asegurar que el 
 * valor a mostrar se encuentre dentro del rango válido (0-100).
 *
 * @author david
 * @version 1.0
 * @since 2025-07-12
 */
public class ComponenteCInt extends LeafComponent {

    //<editor-fold defaultstate="collapsed" desc="Declaración de campos y constantes">
    /**
     * Color de fondo por defecto del componente cuando su estado es válido.
     */
    private static final java.awt.Color COLORINICIO = new java.awt.Color(242, 242, 242);

    /**
     * Almacena el valor numérico actual del componente. Es de tipo {@link Integer}.
     */
    private Integer data;

    /**
     * Define el nombre lógico de la propiedad principal que este componente representa.
     */
    private String propertyName = "Dato";

    /**
     * Almacena el mensaje de la última validación fallida.
     */
    private String error = "";

    /**
     * Define el conjunto de propiedades que pueden ser compartidas o enlazadas
     * con otros componentes del framework.
     */
    private static final Set<String> sharedProperties = Set.of("data", "propertyName");
    
    /**
     * Campo para la propiedad 'background', expuesto para mecanismos de data binding.
     * Almacena el color de fondo actual del componente.
     */    
    Color background;
    //</editor-fold>

    /**
     * Constructor por defecto.
     * <p>
     * Inicializa los componentes visuales, configura el rango de la barra de
     * progreso (0-100) y establece su valor inicial de forma segura.
     */
    public ComponenteCInt() {
        initComponents();
        // Configura el rango de la barra de progreso.
        this.jProgressBar1.setMinimum(0);
        this.jProgressBar1.setMaximum(100);
        // Sincroniza el dato interno con el valor inicial de la barra de progreso.
        setData(this.jProgressBar1.getValue());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables

    //<editor-fold defaultstate="collapsed" desc="Getters y Setters de Propiedades">
    /**
     * Obtiene el valor de la propiedad principal ('data') del componente.
     * @return El valor actual como un {@code Integer}.
     */
    public Integer getData() {
        return data;
    }

    /**
     * Establece el valor de la propiedad principal ('data') del componente.
     * <p>
     * Actualiza el estado interno, sincroniza la vista (JProgressBar) y notifica
     * a los listeners de que la propiedad 'data' ha cambiado.
     *
     * @param dato El nuevo valor de tipo {@code Integer} para el componente.
     */
    public void setData(Integer dato) {
        Integer oldValue = this.data;
        // Se comprueba si el valor realmente ha cambiado para evitar bucles de actualización.
        if (oldValue == null || !oldValue.equals(dato)) {
            this.data = dato;
            // Actualiza la UI para que refleje el nuevo valor.
            this.jProgressBar1.setValue(dato);
            // Notifica a los listeners del cambio en la propiedad "data".
            firePropertyChange("data", oldValue, dato);
        }
    }

    /**
     * Obtiene el nombre lógico utilizado para identificar la propiedad principal
     * de este componente en el mecanismo de data-binding.
     *
     * @return El nombre de la propiedad, por ejemplo, "Dato".
     */
    public String getPropertyName() {
        return propertyName;
    }

    /**
     * Establece el nombre lógico para la propiedad principal de este componente.
     * <p>
     * Este nombre es crucial para que el sistema de data-binding pueda
     * sincronizar este componente con otros que gestionen una propiedad con el
     * mismo nombre.
     *
     * @param nombrePropiedad El nuevo nombre para la propiedad principal.
     */
    public void setPropertyName(String nombrePropiedad) {
        this.propertyName = nombrePropiedad;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Implementación de la Interfaz Validation">
    /**
     * {@inheritDoc}
     * Restablece el componente a su estado inicial por defecto.
     *
     * @return {@code true} si la configuración fue exitosa, {@code false} en caso contrario.
     */
    @Override
    public boolean configurar() {
        try {
            setData(0);
            setBackground(COLORINICIO);
            error = "";
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * {@inheritDoc}
     * Valida si el valor de 'data' se encuentra en el rango de 0 a 100.
     *
     * @return {@code true} si el valor es válido, {@code false} en caso contrario.
     */
    @Override
    public boolean validar() {
        if (data > 100 || data < 0) {
            this.setBackground(Color.red);
            error = this.getClass().getSimpleName() + ": El valor debe estar entre 0 y 100.";
            return false;
        } else {
            setBackground(COLORINICIO);
            error = "";
            return true;
        }
    }

    /**
     * {@inheritDoc}
     * @return El último mensaje de error de validación, o una cadena vacía si no hay error.
     */
    @Override
    public String getError() {
        return error;
    }
    //</editor-fold>

    /**
     * {@inheritDoc}
     * @return Un {@link Set} con los nombres de las propiedades compartidas.
     */
    @Override
    public Set<String> getSharedProperies() {
        return sharedProperties;
    }

}

