/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package es.uned.TFGDavidGiner.components.leafs;

import es.uned.TFGDavidGiner.core.LeafComponent;
import java.awt.Color;
import java.util.Set;

/**
 * Componente de hoja que encapsula un {@link javax.swing.JSlider} para gestionar
 * un valor numérico, representado como un {@link String}.
 * <p>
 * Este componente, que hereda de {@link LeafComponent}, permite al usuario
 * seleccionar un valor deslizando un control. Implementa la interfaz 
 * {@link es.uned.TFGDavidGiner.core.interfaces.IValidation} con una lógica de 
 * validación doble: comprueba que el valor esté en el rango 0-100 y también 
 * incluye una condición especial que se activa si la propiedad `propertyName`
 * tiene el valor "ERROR".
 *
 * @author david
 * @version 1.0
 * @since 12-07-2025
 */
public class ComponenteB extends LeafComponent {

    //<editor-fold defaultstate="collapsed" desc="Declaración de campos y constantes">
    /**
     * Color de fondo por defecto del componente cuando su estado es válido.
     */
    private static final java.awt.Color COLORINICIO = new java.awt.Color(242, 242, 242);

    /**
     * Almacena el valor principal del componente como una cadena de texto.
     */
    private String data;

    /**
     * Define el nombre lógico de la propiedad principal que este componente representa.
     */
    private String propertyName = "Dato";

    /**
     * Almacena el mensaje de la última validación fallida.
     */
    private String error = "";

    /**
     * Define el conjunto de propiedades que pueden ser compartidas o enlazadas
     * con otros componentes del framework.
     */
    private static final Set<String> sharedProperties = Set.of("data", "propertyName");

    /**
     * Campo para la propiedad 'background', expuesto para mecanismos de data binding.
     */
    private Color background;
    //</editor-fold>

    /**
     * Constructor por defecto.
     * <p>
     * Inicializa los componentes visuales y establece el valor inicial de la
     * propiedad 'data' basándose en el valor por defecto del JSlider.
     */
    public ComponenteB() {
        initComponents();
        // Sincroniza el dato interno con el valor inicial del JSlider.
        this.data = Integer.toString(this.jSlider1.getValue());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();

        jSlider1.setValue(0);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        jSlider1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSlider1PropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

        /**
     * Manejador de eventos para cuando el valor del JSlider cambia.
     * <p>
     * Sincroniza el valor del slider con la propiedad 'data' del componente.
     *
     * @param evt El evento de cambio de estado.
     */
    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        setData(String.valueOf(jSlider1.getValue()));
    }//GEN-LAST:event_jSlider1StateChanged

    /**
    * Manejador de eventos para cuando una propiedad del JSlider cambia.
    * <p>
    *
    * @param evt El evento de cambio de estado.
    */
    private void jSlider1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSlider1PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jSlider1PropertyChange
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables

    //<editor-fold defaultstate="collapsed" desc="Getters y Setters de Propiedades">
    /**
     * Obtiene el valor de la propiedad principal ('data') del componente.
     * @return El valor actual como un {@code String}.
     */
    public String getData() {
        return data;
    }

    /**
     * Establece el valor de la propiedad principal ('data') del componente.
     * <p>
     * Actualiza el estado interno, sincroniza la vista (JSpinner) y notifica
     * a los listeners de que la propiedad ha cambiado mediante un
     * {@code PropertyChangeEvent}, lo que es esencial para el data binding.
     *
     * @param dato El nuevo valor para el componente.
     */
    public void setData(String dato) {
        String oldValue = this.data;
        if (oldValue == null || !oldValue.equals(dato)) {
            this.data = dato;
            try {
                // Actualiza la UI para que refleje el nuevo valor.
                jSlider1.setValue(Integer.parseInt(dato));
                // Notifica a los listeners del cambio en la propiedad "data".
                firePropertyChange("data", oldValue, dato);
            } catch (NumberFormatException e) {
                System.err.println("Error: El valor para 'data' no es un entero válido: " + dato);
            }
        }
    }

    /**
     * Obtiene el nombre lógico utilizado para identificar la propiedad principal
     * de este componente en el mecanismo de data-binding.
     *
     * @return El nombre de la propiedad, por ejemplo, "Dato".
     */
    public String getPropertyName() {
        return propertyName;
    }

    /**
     * Establece el nombre lógico para la propiedad principal de este componente.
     * <p>
     * Este nombre es crucial para que el sistema de data-binding pueda
     * sincronizar este componente con otros que gestionen una propiedad con el
     * mismo nombre.
     *
     * @param nombrePropiedad El nuevo nombre para la propiedad principal.
     */
    public void setPropertyName(String nombrePropiedad) {
        this.propertyName = nombrePropiedad;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Implementación de la Interfaz Validation">
    /**
     * {@inheritDoc}
     * Restablece el componente a su estado inicial por defecto.
     *
     * @return {@code true} si la configuración fue exitosa, {@code false} en caso contrario.
     */
    @Override
    public boolean configurar() {
        try {
            setData("0");
            setBackground(COLORINICIO);
            error = "";
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * {@inheritDoc}
     * Valida el estado actual del componente.
     *
     * @return {@code true} si el estado es válido, {@code false} en caso contrario.
     */
    @Override
    public boolean validar() {
        // Validación 1: Comprobar si el nombre de la propiedad es "ERROR".
        if ("ERROR".equals(this.propertyName)) {
            this.setBackground(Color.GREEN); // Condición especial de error con fondo verde.
            error = this.getClass().getSimpleName() + ": El nombre de la propiedad es 'ERROR'.";
            return false;
        }

        // Validación 2: Comprobar el rango numérico.
        try {
            int valor = Integer.parseInt(data);
            if (valor < 0 || valor > 100) {
                this.setBackground(Color.red);
                error = this.getClass().getSimpleName() + ": El valor debe estar entre 0 y 100.";
                return false;
            }
        } catch (NumberFormatException e) {
            this.setBackground(Color.red);
            error = this.getClass().getSimpleName() + ": El valor debe ser un número entero.";
            return false;
        }
        
        // Si todas las validaciones pasan, el estado es válido.
        setBackground(COLORINICIO);
        error = "";
        return true;
    }

    /**
     * {@inheritDoc}
     * @return El último mensaje de error de validación.
     */
    @Override
    public String getError() {
        return error;
    }
    //</editor-fold>

    /**
     * {@inheritDoc}
     * @return Un {@link Set} con los nombres de las propiedades compartidas.
     */
    @Override
    public Set<String> getSharedProperies() {
        return sharedProperties;
    }
 
}

