/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package es.uned.TFGDavidGiner.components.leafs;

import es.uned.TFGDavidGiner.core.LeafComponent;
import java.awt.Color;
import java.util.Set;

/**
 * Componente de hoja que encapsula un {@link javax.swing.JSpinner} para la
 * entrada de un valor numérico.
 * <p>
 * Este componente extiende {@link LeafComponent} y gestiona un dato de tipo {@link String},
 * aunque internamente lo trata como un número para su validación.
 * Implementa la interfaz {@link es.uned.TFGDavidGiner.core.interfaces.IValidation} para comprobar que el valor
 * introducido se encuentre entre 0 y 100.
 *
 * @author david
 * @version 1.0
 * @since 2025-07-12
 */
public class ComponenteA extends LeafComponent {

    /**
     * Color de fondo por defecto del componente cuando no hay errores.
     */
    static final java.awt.Color COLORINICIO = new java.awt.Color(242, 242, 242);
    
    /**
     * Almacena el mensaje de error de la última validación fallida.
     */
    private String error = "";
    
    /**
     * Almacena el valor actual del componente.
     */
    private String data = "0";
    
    /**
     * Define el nombre de la propiedad principal del componente.
     */
    private String propertyName = "Dato";
    
    /**
     * Campo para la propiedad 'background', expuesto para mecanismos de data binding.
     * Almacena el color de fondo actual del componente.
     */
    Color background;

    /**
     * Constructor por defecto.
     * <p>
     * Inicializa los componentes visuales de la interfaz de usuario.
     */
    public ComponenteA() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();

        setBackground(new java.awt.Color(204, 204, 255));

        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });
        jSpinner1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSpinner1PropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jSpinner1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSpinner1PropertyChange
        // TODO add your handling code here:
        //System.out.println("New Value: "+ evt.getNewValue());
        //System.out.println("Old Value: "+ evt.getOldValue());
                
    }//GEN-LAST:event_jSpinner1PropertyChange

    /**
    * Manejador de eventos para cuando el valor del JSpinner cambia.
    * <p>
    * Sincroniza el valor del spinner con la propiedad 'data' del componente.
    *
    * @param evt El evento de cambio de estado.
    */
    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        // Actualiza el dato interno del componente con el nuevo valor del spinner.
        setData(jSpinner1.getValue().toString());
    }//GEN-LAST:event_jSpinner1StateChanged
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner jSpinner1;
    // End of variables declaration//GEN-END:variables

    /**
     * Obtiene el valor actual del componente.
     *
     * @return El valor como un {@link String}.
     */
    public String getData() {
        return data;
    }

    /**
     * Establece el valor del componente.
     * <p>
     * Actualiza el estado interno, sincroniza la vista (JSpinner) y notifica
     * a los listeners de que la propiedad 'data' ha cambiado mediante un
     * {@code PropertyChangeEvent}.
     *
     * @param dato El nuevo valor para el componente.
     */
    public void setData(String dato) {
        String oldValue = this.data;

        // Se comprueba si el valor realmente ha cambiado para evitar bucles de actualización.
        if (oldValue == null || !oldValue.equals(dato)) {
            this.data = dato;
            // Actualiza la UI para que refleje el nuevo valor.
            jSpinner1.setValue(Integer.parseInt(dato));
            // Notifica a los listeners del cambio en la propiedad "data".
            firePropertyChange("data", oldValue, dato);
        }
    }

    /**
     * Obtiene el nombre de la propiedad principal.
     *
     * @return El nombre de la propiedad.
     */
    public String getPropertyName() {
        return propertyName;
    }

    /**
     * Establece el nombre de la propiedad principal.
     *
     * @param nombrePropiedad El nuevo nombre para la propiedad.
     */
    public void setPropertyName(String nombrePropiedad) {
        this.propertyName = nombrePropiedad;
    }

    /**
     * Restablece el componente a su estado inicial por defecto.
     *
     * @return {@code true} si la configuración fue exitosa, {@code false} en caso contrario.
     */
    @Override
    public boolean configurar() {
        try {
            setData("0");
            setBackground(COLORINICIO);
            error = "";
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * Valida el estado actual del componente.
     * <p>
     * Comprueba si el valor está en el rango de 0 a 100. Si no es válido,
     * cambia el color de fondo a rojo y establece un mensaje de error.
     *
     * @return {@code true} si el valor es válido, {@code false} en caso contrario.
     */
    @Override
    public boolean validar() {
        if (Integer.parseInt(data) > 100 || Integer.parseInt(data) < 0) {
            this.setBackground(Color.red);
            error = this.getClass().getName() + ": El valor no está entre 0 y 100";
            return false;
        } else {
            setBackground(COLORINICIO);
            error = "";
        }
        return true;
    }

    /**
     * Devuelve el último mensaje de error de validación.
     *
     * @return El mensaje de error, o una cadena vacía si no hay error.
     */
    @Override
    public String getError() {
        return error;
    }

    /**
     * Define el conjunto de propiedades que pueden ser compartidas o enlazadas
     * con otros componentes del framework.
     */
    private static final Set<String> sharedProperties = Set.of("data", "propertyName");

    /**
     * Devuelve el conjunto de nombres de las propiedades compartidas.
     *
     * @return Un {@link Set} con los nombres de las propiedades.
     */
    @Override
    public Set<String> getSharedProperies() {
        return sharedProperties;
    }


}

