/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package es.uned.TFGDavidGiner.components.leafs;

import es.uned.TFGDavidGiner.core.LeafComponent;
import java.awt.Color;
import java.util.Set;

/**
 * Componente de hoja compuesto que encapsula varios campos de entrada de datos.
 * <p>
 * Este componente, que extiende {@link LeafComponent}, gestiona múltiples propiedades
 * (`data`, `otra`, `background`) y expone una propiedad (`propertiesToLink`) para
 * configurar enlaces de datos con otros componentes en un entorno de desarrollo.
 * Implementa la interfaz {@link es.uned.TFGDavidGiner.core.interfaces.IValidation} para validar su estado interno.
 *
 * @author david
 * @version 1.0
 * @since 12-07-2025
 */
public class ComponenteAComp extends LeafComponent {

    /**
     * Color de fondo por defecto del componente cuando su estado es válido.
     */
    static final java.awt.Color COLORINICIO = new java.awt.Color(242, 242, 242);

    //<editor-fold defaultstate="collapsed" desc="Declaración de propiedades y variables de estado">
    /**
     * Almacena el valor numérico principal del componente, vinculado al JSpinner.
     */
    private String data = "0";
    /**
     * Almacena un valor de texto secundario, vinculado al JTextField.
     */
    private String otra = "0";
    /**
     * Almacena la lista de propiedades que este componente debe observar en otros.
     */
    private String[] propertiesToLink = new String[0];
    /**
     * Almacena el mensaje de la última validación fallida.
     */
    private String error = "";
    /**
     * Define el nombre de la propiedad principal que este componente representa.
     */
    private String propertyName = "Dato";
    /**
     * Define el conjunto de propiedades que pueden ser compartidas o enlazadas
     * con otros componentes del framework.
     */
    private static final Set<String> sharedProperties = Set.of("data", "propertyName", "background");
    /**
     * Campo para la propiedad 'background', expuesto para mecanismos de data binding.
     * Almacena el color de fondo actual del componente.
     */
    private Color background;  
    //</editor-fold>

    /**
     * Constructor por defecto que inicializa los componentes de la interfaz.
     */
    public ComponenteAComp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jTextField1 = new javax.swing.JTextField();

        setBackground(new java.awt.Color(204, 204, 255));

        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });
        jSpinner1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSpinner1PropertyChange(evt);
            }
        });

        // Listener para el jTextField1 para que también dispare el evento
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );
    }// </editor-fold>                        

    /**
    * Manejador de eventos para el cambio de propiedad del {@link JSpinner}.
    * Actualmente no realiza ninguna acción.
    * @param evt El evento de cambio de estado.
    */
    private void jSpinner1PropertyChange(java.beans.PropertyChangeEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    /**
     * Manejador de eventos para el cambio de estado del {@link JSpinner}.
     * Actualiza la propiedad 'data' con el nuevo valor del spinner.
     * @param evt El evento de cambio de estado.
     */
    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {
        this.data = jSpinner1.getValue().toString();
    }

    /**
     * Manejador de eventos para la acción del {@link JTextField}.
     * Actualiza la propiedad 'otra' con el texto del campo.
     * @param evt El evento de acción.
     */
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {
        this.otra = jTextField1.getText();
    }                                         
  
    // Variables declaration - do not modify                     
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration                   

    //<editor-fold defaultstate="collapsed" desc="Getters y Setters de Propiedades">
    /**
     * Obtiene el valor de la propiedad principal ('data') del componente.
     * @return El valor actual como un {@code String}.
     */
    public String getData() {
        return data;
    }

    /**
     * Establece el valor de la propiedad principal ('data') del componente.
     * <p>
     * Actualiza el estado interno, sincroniza la vista (JSpinner) y notifica
     * a los listeners de que la propiedad 'data' ha cambiado.
     *
     * @param dato El nuevo valor de tipo {@code String} para el componente.
     */
    public void setData(String dato) {
        String oldValue = this.data;
        if (oldValue == null || !oldValue.equals(dato)) {
            this.data = dato;
            try {
                jSpinner1.setValue(Integer.parseInt(dato));
                firePropertyChange("data", oldValue, dato);
            } catch (NumberFormatException e) {
                System.err.println("Error: El valor para 'data' no es un entero válido: " + dato);
            }
        }
    }

    /**
     * Obtiene el valor de la propiedad secundaria 'otra'.
     * @return El valor de la propiedad.
     */
    public String getOtra() {
        return otra;
    }

    /**
     * Establece el valor de la propiedad 'otra' y actualiza el JTextField correspondiente.
     * @param otra El nuevo valor para la propiedad.
     */
    public void setOtra(String otra) {
        if (!this.otra.equals(otra)) {
            this.otra = otra;
            this.jTextField1.setText(otra);
        }
    }

    /**
     * Obtiene la lista de nombres de propiedades que este componente debe observar.
     * @return Un array de String con los nombres de las propiedades a enlazar.
     */
    public String[] getPropertiesToLink() {
        return propertiesToLink;
    }

    /**
     * Establece la lista de propiedades a observar, notificando del cambio.
     * Esta propiedad es editable en el panel de propiedades del IDE.
     * @param propertiesToLink Un array de String con los nombres de las propiedades.
     */
    public void setPropertiesToLink(String[] propertiesToLink) {
        String[] oldProperties = this.propertiesToLink;
        this.propertiesToLink = propertiesToLink;
        firePropertyChange("propertiesToLink", oldProperties, propertiesToLink);
    }
   
    /**
     * Obtiene el nombre lógico de la propiedad principal que gestiona este componente.
     * @return El nombre de la propiedad.
     */
    public String getPropertyName() {
        return propertyName;
    }

    /**
     * Establece el nombre lógico de la propiedad principal que gestiona este componente.
     * @param nombrePropiedad El nuevo nombre para la propiedad principal.
     */
    public void setPropertyName(String nombrePropiedad) {
        this.propertyName = nombrePropiedad;
    }

    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Implementación de la Interfaz Validation">
    /**
     * {@inheritDoc}
     * Restablece el componente a su estado inicial.
     */
    @Override
    public boolean configurar() {
        try {
            setData("0");
            setBackground(COLORINICIO);
            error = "";
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * {@inheritDoc}
     * Valida que el valor de 'data' sea un número entero entre 0 y 100.
     */
    @Override
    public boolean validar() {
        try {
            int valor = Integer.parseInt(data);
            if (valor > 100 || valor < 0) {
                this.setBackground(Color.red);
                error = this.getClass().getSimpleName() + ": El valor debe estar entre 0 y 100.";
                return false;
            } else {
                setBackground(COLORINICIO);
                error = "";
                return true;
            }
        } catch (NumberFormatException e) {
            this.setBackground(Color.red);
            error = this.getClass().getSimpleName() + ": El valor debe ser un número entero.";
            return false;
        }
    }

    /**
     * {@inheritDoc}
     * @return El último mensaje de error de validación.
     */
    @Override
    public String getError() {
        return error;
    }
    //</editor-fold>

    /**
     * {@inheritDoc}
     * @return Un conjunto con los nombres de las propiedades compartidas.
     */
    @Override
    public Set<String> getSharedProperies() {
        return sharedProperties;
    }
 
}